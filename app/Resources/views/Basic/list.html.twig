{% extends "base.html.twig" %}

{% block body %}

    {#<input style="margin-bottom: 20px" id="addToggle" type="checkbox" data-toggle="toggle" data-on="add" data-off="add" data-onstyle="success" data-offstyle="danger">#}

    {% block addOrEditForm %}
        {% block toggleFormButton %}

        {% endblock %}

    {% endblock %}

    {% for flash_message in app.session.flashBag.get('error') %}
        <div class="flash-notice">
            {{ flash_message }}
        </div>
    {% endfor %}

    <div class = "panel panel-info courses table-responsive list-margins">
        <div class = "panel-body">
            <table class="table table-condensed">
                {% block listName %}

                {% endblock %}
                <thead>
                {% block tableHeader %}

                {% endblock %}
                </thead>
                <tbody>
                {% block tableBody %}

                {% endblock %}
                </tbody>
            </table>
        </div>
    </div>

{% endblock %}

{% block javascripts %}
    <script>
        $(document).ready(function() {
            if (!$("#addToggle").prop("checked")) {
                $(".table-wrap").hide();
            }
        });

        $("th").on("click", function(){

            var sortingIndex = $(this).parent().children().index($(this));
            var numberOfHeaders = $(this).parent().children().length;

            var rowList = $(this).closest('table').find('tbody').find('tr').toArray().map(function(x){

                var rowValues = [];
                for(var i = 0; i < numberOfHeaders; i++){

                    rowValues.push(x.cells[i].innerText);
                }

                var href = x.cells[numberOfHeaders].innerHTML.split('"')[1];
                var hrefId = rowValues.push(href.replace( /^\D+/g, ''));

                return rowValues;
            });

            rowList.sort(function(a, b) {
                if (!isNaN(a[sortingIndex]) && !isNaN(b[sortingIndex])) {
                    if (Number(a[sortingIndex]) < Number(b[sortingIndex])) {

                        return -1;
                    }
                    if (Number(a[sortingIndex]) > Number(b[sortingIndex])) {

                        return 1;
                    }
                } else {
                    if (a[sortingIndex] < b[sortingIndex]) {

                        return -1;
                    }
                    if (a[sortingIndex] > b[sortingIndex]) {

                        return 1;
                    }
                }

                return 0;
            });

            var numberOfRows = $('tbody tr').length;
            var numberOfColumns = rowList[0].length+1;

            $("tbody tr").each(function(rowIndex){

                var $row = $(this);
                $row.children().each(function(columnIndex)
                {
                    if(columnIndex < numberOfHeaders){
                        $(this).text(rowList[rowIndex][columnIndex]);
                    } else{
                        var html = $(this).html().split('"');
                        if ($(this).html().indexOf("data-target") !== -1) {
                            var href = html[7];
                            var hrefId = rowList[rowIndex][numberOfHeaders];
                            href = href.replace(/\d+/g, hrefId);
                            html[7] = href;
                            html = html.join('"');
                            $(this).html(html);
                        } else {
                            var href = html[1];
                            var hrefId = rowList[rowIndex][numberOfHeaders];
                            href = href.slice(0, href.lastIndexOf('/')+1) + hrefId;
                            html[1] = href;
                            html = html.join('"');
                            $(this).html(html);
                        }
                    }
                });
            })

        });
    </script>
{% endblock %}